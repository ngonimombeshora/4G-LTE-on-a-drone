################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the terms found in the LICENSE file in the root of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
################################
# include helper functions
################################
SCRIPT=$(readlink -f ${BASH_SOURCE})
THIS_SCRIPT_PATH=`dirname $SCRIPT`
source $THIS_SCRIPT_PATH/build_helper
source $THIS_SCRIPT_PATH/build_helper.lfds
source $THIS_SCRIPT_PATH/build_helper.asn1c
source $THIS_SCRIPT_PATH/build_helper.fd


##########################################
# X.509 certificates
##########################################


#-------------------------------------------------------------------------------
#arg1 is force (no interactive script)
check_install_mme_software() {
  if ! check_supported_distribution; then
    echo_error "Your distribution $(get_distribution_release) is not supported by openair-cn"
    return 1
  fi
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi

  check_enable_epel_repos

  # Compilers, generators, ...
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      build-essential \
      check \
      cmake \
      make \
      doxygen \
      flex \
      gdb \
      git"
    case "$(get_distribution_release)" in
      "ubuntu17.04" | "ubuntu17.10" | "ubuntu18.04")
	PACKAGE_LIST="$PACKAGE_LIST castxml"
      ;;
      "ubuntu14.04" | "ubuntu16.04")
	PACKAGE_LIST="$PACKAGE_LIST gccxml"
      ;;
    esac
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      check \
      $CMAKE \
      make \
      doxygen \
      flex \
      gdb \
      git \
      pkgconfig"
  else
    echo_error "$OS_DISTRO is not a supported distribution."
    return 1
  fi
  echo "Install build packages"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  # Libraries
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
	"ubuntu14.04" | "ubuntu16.04" | "ubuntu17.04" | "ubuntu17.10")
	    specific_packages="libconfig8-dev"
	    ;;
	"ubuntu18.04")
	    specific_packages="libconfig-dev"
	    ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      guile-2.0-dev \
      libgcrypt11-dev \
      libgmp-dev \
      libhogweed? \
      libidn2-0-dev \
      libidn11-dev \
      libpthread-stubs0-dev \
      libsctp1 \
      libsctp-dev \
      libssl-dev \
      libtool \
      libxml2 \
      libxml2-dev \
      openssl \
      python \
      pkg-config"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    case "$(get_distribution_release)" in
	"centos7")
	    specific_packages="python mscgen"
	    ;;
	"centos8")
	    specific_packages="python2"
	    ;;
    esac
    PACKAGE_LIST="\
      guile-devel \
      libconfig-devel \
      libgcrypt-devel \
      gmp-devel \
      gtk3-devel \
      libidn2-devel \
      libidn-devel \
      lksctp-tools \
      lksctp-tools-devel \
      openssl-devel \
      libtool \
      libxml2 \
      libxml2-devel \
      openssl \
      check-devel \
      $specific_packages \
      nettle-devel \
      gnutls-devel"
  else
    echo_error "$OS_DISTRO is not a supported distribution."
    return 1
  fi
  echo "Install libraries"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  if [[ $OS_DISTRO == 'ubuntu' ]]; then
    #Remove old gnutls/nettle installation that was done from sources
    echo "Install gnutls/nettle"
    $SUDO apt-get install -y nettle-dev nettle-bin
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    case "$(get_distribution_release)" in
      "ubuntu17.04" | "ubuntu17.10" | "ubuntu18.04")
	$SUDO apt-get install -y libgnutls28-dev
	ret=$?;[[ $ret -ne 0 ]] && return $ret
	;;
      "ubuntu14.04" | "ubuntu16.04")
	$SUDO apt-get install -y libgnutls-dev
	ret=$?;[[ $ret -ne 0 ]] && return $ret
	;;
    esac
  fi

  $FD_INSTALL_FUNC $1
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  install_asn1c_from_source $1
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  install_liblfds7.1.0_from_source $1
  ret=$?;[[ $ret -ne 0 ]] && return $ret


  # Networking
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
	"ubuntu14.04" | "ubuntu16.04" | "ubuntu17.04" | "ubuntu17.10")
	    specific_packages="iproute"
	    ;;
	"ubuntu18.04")
	    specific_packages="iproute2"
	    ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      ethtool \
      vlan"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    case "$(get_distribution_release)" in
        "centos7")
            specific_packages="vconfig"
            ;;
        "centos8")
            specific_packages=""
            ;;
    esac
    PACKAGE_LIST="\
      ethtool \
      iproute \
      $specific_packages "
  else
    echo_error "$OS_DISTRO is not a supported distribution."
    return 1
  fi
  echo "Install networking packages"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  if [[ "$OS_DISTRO" == "ubuntu" ]]; then
    PACKAGE_LIST="\
      check \
      python-dev \
      unzip"
  elif [[ "$OS_DISTRO" == "rhel" ]] || [[ "$OS_DISTRO" == "centos" ]]; then
    case "$(get_distribution_release)" in
        "centos7")
            specific_packages="python-devel pexpect"
            ;;
        "centos8")
            specific_packages="python2-devel"
            ;;
    esac
    PACKAGE_LIST="\
      check \
      check-devel \
      $specific_packages \
      psmisc \
      unzip"
  elif [[ "$OS_DISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      check \
      check-devel \
      python-devel \
      python2-pexpect \
      unzip"
  else
    echo_error "$OS_DISTRO is not a supported distribution."
    return 1
  fi
  echo "Install misc packages"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  return $?
}


